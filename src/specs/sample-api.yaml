openapi: 3.0.0
info:
  title: Sample API
  description: A sample API for testing purposes
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://jsonplaceholder.typicode.com
    description: Production server

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      description: Create a new user with the provided information
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user
      description: Update an existing user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user
      description: Delete a user by their ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully

  /posts:
    get:
      summary: Get all posts
      description: Retrieve a list of all posts
      tags:
        - Posts
      parameters:
        - name: userId
          in: query
          description: Filter posts by user ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      description: Create a new post
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/{id}:
    get:
      summary: Get post by ID
      description: Retrieve a specific post by its ID
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    put:
      summary: Update post
      description: Update an existing post
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      summary: Delete post
      description: Delete a post by its ID
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Post deleted successfully

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - username
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
        name:
          type: string
          description: Full name of the user
        username:
          type: string
          description: Username of the user
        email:
          type: string
          format: email
          description: Email address of the user
        address:
          $ref: '#/components/schemas/Address'
        phone:
          type: string
          description: Phone number of the user
        website:
          type: string
          format: uri
          description: Website of the user
        company:
          $ref: '#/components/schemas/Company'

    UserInput:
      type: object
      required:
        - name
        - email
        - username
      properties:
        name:
          type: string
          description: Full name of the user
        username:
          type: string
          description: Username of the user
        email:
          type: string
          format: email
          description: Email address of the user
        phone:
          type: string
          description: Phone number of the user
        website:
          type: string
          format: uri
          description: Website of the user

    Address:
      type: object
      properties:
        street:
          type: string
          description: Street address
        suite:
          type: string
          description: Suite or apartment number
        city:
          type: string
          description: City name
        zipcode:
          type: string
          description: ZIP code
        geo:
          $ref: '#/components/schemas/Geo'

    Geo:
      type: object
      properties:
        lat:
          type: string
          description: Latitude
        lng:
          type: string
          description: Longitude

    Company:
      type: object
      properties:
        name:
          type: string
          description: Company name
        catchPhrase:
          type: string
          description: Company catchphrase
        bs:
          type: string
          description: Business strategy

    Post:
      type: object
      required:
        - id
        - title
        - body
        - userId
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the post
        title:
          type: string
          description: Title of the post
        body:
          type: string
          description: Content of the post
        userId:
          type: integer
          format: int64
          description: ID of the user who created the post

    PostInput:
      type: object
      required:
        - title
        - body
        - userId
      properties:
        title:
          type: string
          description: Title of the post
        body:
          type: string
          description: Content of the post
        userId:
          type: integer
          format: int64
          description: ID of the user who created the post

tags:
  - name: Users
    description: User management operations
  - name: Posts
    description: Post management operations

